# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function, unicode_literals

import dj_database_url
import sentry_sdk

from decouple import config
from sentry_sdk.integrations.django import DjangoIntegration
from ureport.settings_common import *  # noqa


DEBUG = config('DEBUG', default=False, cast=bool)
TEMPLATE_DEBUG = DEBUG

EMPTY_SUBDOMAIN_HOST = config('EMPTY_SUBDOMAIN_HOST', 'https://ureport.in')
HOSTNAME = config('APP_HOSTNAME', 'ureport.in')

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=lambda v: [
                       s.strip() for s in v.split(',')])
SESSION_COOKIE_DOMAIN = config('SESSION_COOKIE_DOMAIN', 'ureport.in')
SESSION_COOKIE_SECURE = False

SECURE_HSTS_SECONDS = 1800
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_AGE = 10800

SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

ADMINS = config('ADMINS',
                default='Ilhasoft|contato@ilhasoft.com.br',
                cast=lambda v: [
                    (
                        s.strip().split('|')[0],
                        s.strip().split('|')[1],
                    ) for s in v.split(',')] if v else [])

# set the mail settings, we send through gmail
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_HOST_USER = config('EMAIL_HOST_USER', 'no-reply@ilhasoft.com.br')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='no-reply@ilhasoft.com.br')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)

MANAGERS = ADMINS

INSTALLED_APPS = INSTALLED_APPS + ('gunicorn', 'raven.contrib.django.raven_compat', 'storages')

# Set your DSN value
sentry_sdk.init(
    config("RAVEN_DSN", default="https://c91ad31f95454bcf8d659c6914f6b417@sentry.ilhasoft.mobi/5"),
    integrations=[DjangoIntegration()]
)


AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='')
AWS_S3_SECURE_URLS = False
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_QUERYSTRING_AUTH = False
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',

}

MEDIA_URL = config('MEDIA_URL', default='https://ureport.ilhasoft.mobi/media/')
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)


SITE_API_HOST = config(
    'SITE_API_HOST', default='https://rapidpro.ilhasoft.mobi')
API_ENDPOINT = config(
    'SITE_API_HOST', default='https://rapidpro.ilhasoft.mobi')


DATABASES = {}
DATABASES['default'] = dj_database_url.parse(config('DEFAULT_DATABASE'))
DATABASES['default']['CONN_MAX_AGE'] = 60

# no debug toolbar in prod
MIDDLEWARE = (
    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'smartmin.middleware.AjaxRedirect',
    'django.middleware.locale.LocaleMiddleware',
    'dash.orgs.middleware.SetOrgMiddleware',
)

MIDDLEWARE = MIDDLEWARE + ('whitenoise.middleware.WhiteNoiseMiddleware',)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = "default"

# trust connections that are coming in on this protocol
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'HTTPS')

# compress arguments
COMPRESS_ENABLED = config('COMPRESS_ENABLED', default=True, cast=bool)
COMPRESS_CSS_HASHING_METHOD = 'content'
COMPRESS_OFFLINE = config('COMPRESS_OFFLINE', default=True, cast=bool)
COMPRESS_OFFLINE_CONTEXT = [
    dict(STATIC_URL=STATIC_URL, base_template='frame.html', org=None, debug=False, testing=False),
    dict(STATIC_URL=STATIC_URL, base_template='public_base.html', org=None, debug=False, testing=False)
]
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter', 'compressor.filters.cssmin.CSSMinFilter']
COMPRESS_JS_FILTERS = ['compressor.filters.jsmin.JSMinFilter']


# redis configuration
REDIS_HOST = config('REDIS_HOST')
REDIS_DATABASE = config('REDIS_DATABASE', default='1')

BROKER_URL = 'redis://{}:6379/{}'.format(REDIS_HOST, REDIS_DATABASE)

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': BROKER_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=BROKER_URL)
CELERY_ALWAYS_EAGER = config('CELERY_ALWAYS_EAGER', default=False, cast=bool)
CELERY_EAGER_PROPAGATES_EXCEPTIONS = config(
    'CELERY_EAGER_PROPAGATES_EXCEPTIONS', default=True, cast=bool)


UREPORT_ASYNC_FETCHED_DATA_CACHE_TIME = config('UREPORT_ASYNC_FETCHED_DATA_CACHE_TIME', default=3600)
UREPORT_RUN_FETCHED_DATA_CACHE_TIME = config('UREPORT_RUN_FETCHED_DATA_CACHE_TIME', default=600)


TIME_ZONE = config('TIME_ZONE', default='America/Sao_Paulo')
USER_TIME_ZONE = config('USER_TIME_ZONE', default='America/Sao_Paulo')


